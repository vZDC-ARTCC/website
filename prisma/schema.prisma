// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scopes            String[]
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String           @id @default(cuid())
  cid              String           @unique
  firstName        String?
  lastName         String?
  fullName         String?
  email            String?          @unique
  emailVerified    DateTime?
  artcc            String
  rating           Int
  division         String
  roles            Role[]
  staffPositions   StaffPosition[]
  preferredName    String?
  bio              String?
  avatarUrl        String?
  controllerStatus ControllerStatus
  log              ControllerLog?

  accounts              Account[]
  sessions              Session[]
  soloCertifications    SoloCertification[]
  certifications        Certification[]
  logs                  Log[]
  dossier               DossierEntry[]      @relation("DossierEntryUser")
  writtenDossierEntries DossierEntry[]      @relation("DossierEntryWriter")
  feedback              Feedback[]
}

model VatsimUpdateMetadata {
  id        String   @id @default(cuid())
  timestamp DateTime
}

model ControllerLog {
  id     String               @id @default(cuid())
  user   User                 @relation(fields: [userId], references: [id])
  userId String               @unique
  months ControllerLogMonth[]
}

model ControllerLogMonth {
  id            String        @id @default(cuid())
  log           ControllerLog @relation(fields: [logId], references: [id])
  logId         String
  month         Int
  year          Int
  deliveryHours Float
  groundHours   Float
  towerHours    Float
  approachHours Float
  centerHours   Float
}

enum ControllerStatus {
  HOME
  VISITOR
}

enum Role {
  CONTROLLER
  MENTOR
  INSTRUCTOR
  STAFF
}

enum StaffPosition {
  ATM
  DATM
  TA
  EC
  FE
  WM
  ATA
  AWM
  AEC
  AFE
  INS
  MTR
}

model DossierEntry {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], name: "DossierEntryUser", map: "dossierEntries")
  userId    String
  writer    User     @relation(fields: [writerId], references: [id], name: "DossierEntryWriter", map: "writtenDossierEntries")
  writerId  String
  message   String
  timestamp DateTime
}

enum CertificationOption {
  NONE
  MINOR
  MAJOR
  SOLO
}

model CertificationType {
  id                   String                @id @default(cuid())
  name                 String
  order                Int
  canSoloCert          Boolean
  certificationOptions CertificationOption[]
  soloCertifications   SoloCertification[]
  certifications       Certification[]
}

model SoloCertification {
  id                  String            @id @default(cuid())
  controller          User              @relation(fields: [userId], references: [id])
  expires             DateTime
  position            String
  certificationType   CertificationType @relation(fields: [certificationTypeId], references: [id], onDelete: Cascade)
  userId              String
  certificationTypeId String
}

model Certification {
  id                  String              @id @default(cuid())
  certificationType   CertificationType   @relation(fields: [certificationTypeId], references: [id], onDelete: Cascade)
  controller          User                @relation(fields: [userId], references: [id])
  certificationOption CertificationOption
  certificationTypeId String
  userId              String
}

enum LogType {
  CREATE
  UPDATE
  DELETE
}

enum LogModel {
  USER
  AIRPORT_TRACON_GROUP
  AIRPORT_RUNWAY
  AIRPORT_PROCEDURE
  AIRPORT
  FEEDBACK
  VISITOR_APPLICATION
  SOLO_CERTIFICATION
  CERTIFICATION
  CERTIFICATION_TYPE
}

model Log {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  type      LogType
  model     LogModel
  message   String
  timestamp DateTime
  userId    String
}

enum VisitorApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum FeedbackStatus {
  PENDING
  RELEASED
  STASHED
}

model VisitorApplication {
  id              String                   @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  rating          String
  cid             String
  homeFacility    String
  whyVisit        String
  submittedAt     DateTime
  decidedAt       DateTime?
  reasonForDenial String?
  status          VisitorApplicationStatus
}

model Feedback {
  id                 String         @id @default(cuid())
  pilotName          String
  pilotEmail         String
  pilotCid           String
  pilotCallsign      String
  controller         User           @relation(fields: [controllerId], references: [id])
  controllerId       String
  controllerPosition String
  rating             Int
  comments           String?
  staffComments      String?
  status             FeedbackStatus
  submittedAt        DateTime
  decidedAt          DateTime?
}

model TraconGroup {
  id       String    @id @default(cuid())
  name     String
  airports Airport[]
}

model Airport {
  id            String      @id @default(cuid())
  icao          String      @unique
  iata          String
  name          String
  city          String
  traconGroup   TraconGroup @relation(fields: [traconGroupId], references: [id], onDelete: Cascade)
  traconGroupId String
  runways       Runway[]
}

model Runway {
  id                 String              @id @default(cuid())
  name               String
  airport            Airport             @relation(fields: [airportId], references: [id], onDelete: Cascade)
  airportId          String
  runwayInstructions RunwayInstruction[]
}

model RunwayInstruction {
  id        String @id @default(cuid())
  runway    Runway @relation(fields: [runwayId], references: [id], onDelete: Cascade)
  runwayId  String
  route     String
  procedure String
}

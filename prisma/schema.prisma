// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scopes            String[]
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String              @id @default(cuid())
  cid                String              @unique
  operatingInitials  String?
  firstName          String?
  lastName           String?
  fullName           String?
  email              String?             @unique
  emailVerified      DateTime?
  artcc              String
  rating             Int
  division           String
  roles              Role[]
  staffPositions     StaffPosition[]
  preferredName      String?
  bio                String?
  avatarUrl          String?
  controllerStatus   ControllerStatus
  log                ControllerLog?
  visitorApplication VisitorApplication?
  writtenFeedback    Feedback[]          @relation("FeedbackPilot")
  updatedAt          DateTime
  eventSignups       EventPosition[]
  staffingRequests   StaffingRequest[]
  loas               LOA[]

  noRequestLoas                  Boolean?
  noEventSignup                  Boolean?
  noEditProfile                  Boolean?
  excludedFromVatusaRosterUpdate Boolean?
  hiddenFromRoster               Boolean?

  accounts              Account[]
  sessions              Session[]
  soloCertifications    SoloCertification[]
  certifications        Certification[]
  logs                  Log[]
  dossier               DossierEntry[]      @relation("DossierEntryUser")
  writtenDossierEntries DossierEntry[]      @relation("DossierEntryWriter")
  givenFeedback         Feedback[]          @relation("FeedbackController")
  trainingSessionsGiven TrainingSession[]   @relation("TrainingsInstructor")
  trainingSessions      TrainingSession[]   @relation("TrainingsStudent")
  incidentsReported     IncidentReport[]    @relation("IncidentReportReporter")
  incidentReports       IncidentReport[]    @relation("IncidentReportReportee")
}

model VatsimUpdateMetadata {
  id        String   @id @default(cuid())
  timestamp DateTime
}

model ControllerLog {
  id        String               @id @default(cuid())
  user      User                 @relation(fields: [userId], references: [id])
  userId    String               @unique
  months    ControllerLogMonth[]
  positions ControllerPosition[]
}

model ControllerLogMonth {
  id            String        @id @default(cuid())
  log           ControllerLog @relation(fields: [logId], references: [id])
  logId         String
  month         Int
  year          Int
  deliveryHours Float
  groundHours   Float
  towerHours    Float
  approachHours Float
  centerHours   Float

  @@unique([logId, month, year])
}

model ControllerPosition {
  id       String        @id @default(cuid())
  log      ControllerLog @relation(fields: [logId], references: [id])
  logId    String
  position String
  start    DateTime
  end      DateTime?
  active   Boolean
}

enum ControllerStatus {
  HOME
  VISITOR
  NONE
}

enum Role {
  CONTROLLER
  MENTOR
  INSTRUCTOR
  STAFF
}

enum StaffPosition {
  ATM
  DATM
  TA
  EC
  FE
  WM
  ATA
  AWM
  AEC
  AFE
  INS
  MTR
}

model DossierEntry {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], name: "DossierEntryUser", map: "dossierEntries")
  userId    String
  writer    User     @relation(fields: [writerId], references: [id], name: "DossierEntryWriter", map: "writtenDossierEntries")
  writerId  String
  message   String
  timestamp DateTime
}

enum CertificationOption {
  NONE
  MINOR
  MAJOR
  SOLO
}

model CertificationType {
  id                   String                @id @default(cuid())
  name                 String
  order                Int
  canSoloCert          Boolean
  certificationOptions CertificationOption[]
  soloCertifications   SoloCertification[]
  certifications       Certification[]
}

model SoloCertification {
  id                  String            @id @default(cuid())
  controller          User              @relation(fields: [userId], references: [id])
  expires             DateTime
  position            String
  certificationType   CertificationType @relation(fields: [certificationTypeId], references: [id], onDelete: Cascade)
  userId              String
  certificationTypeId String
}

model Certification {
  id                  String              @id @default(cuid())
  certificationType   CertificationType   @relation(fields: [certificationTypeId], references: [id], onDelete: Cascade)
  controller          User                @relation(fields: [userId], references: [id])
  certificationOption CertificationOption
  certificationTypeId String
  userId              String

  @@unique([certificationTypeId, userId])
}

enum LogType {
  CREATE
  UPDATE
  DELETE
}

enum LogModel {
  USER
  STAFF_POSITION
  LOA
  ROLE
  EVENT
  EVENT_POSITION
  FILE_CATEGORY
  FILE
  STAFFING_REQUEST
  AIRPORT_TRACON_GROUP
  AIRPORT_RUNWAY
  AIRPORT_PROCEDURE
  AIRPORT
  FEEDBACK
  VISITOR_APPLICATION
  SOLO_CERTIFICATION
  CERTIFICATION
  CERTIFICATION_TYPE
  LESSON
  COMMON_MISTAKE
  LESSON_RUBRIC
  TRAINING_SESSION
  INCIDENT_REPORT
  EMAIL
  USER_SETTINGS
  STATISTICS_PREFIXES
}

model Log {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  type      LogType
  model     LogModel
  message   String
  timestamp DateTime
  userId    String
}

enum VisitorApplicationStatus {
  PENDING
  APPROVED
  DENIED
}

enum FeedbackStatus {
  PENDING
  RELEASED
  STASHED
}

model VisitorApplication {
  id              String                   @id @default(cuid())
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String                   @unique
  homeFacility    String
  whyVisit        String
  submittedAt     DateTime
  decidedAt       DateTime?
  reasonForDenial String?
  status          VisitorApplicationStatus
}

model Feedback {
  id                 String         @id @default(cuid())
  pilot              User           @relation(fields: [pilotId], references: [id], onDelete: Cascade, name: "FeedbackPilot")
  pilotId            String
  pilotCallsign      String
  controller         User           @relation(fields: [controllerId], references: [id], onDelete: Cascade, name: "FeedbackController")
  controllerId       String
  controllerPosition String
  rating             Int
  comments           String?
  staffComments      String?
  status             FeedbackStatus
  submittedAt        DateTime
  decidedAt          DateTime?
}

model TraconGroup {
  id       String    @id @default(cuid())
  name     String
  airports Airport[]
}

model Airport {
  id            String      @id @default(cuid())
  icao          String      @unique
  iata          String
  name          String
  city          String
  traconGroup   TraconGroup @relation(fields: [traconGroupId], references: [id], onDelete: Cascade)
  traconGroupId String
  runways       Runway[]
}

model Runway {
  id                 String              @id @default(cuid())
  name               String
  airport            Airport             @relation(fields: [airportId], references: [id], onDelete: Cascade)
  airportId          String
  runwayInstructions RunwayInstruction[]
}

model RunwayInstruction {
  id        String @id @default(cuid())
  runway    Runway @relation(fields: [runwayId], references: [id], onDelete: Cascade)
  runwayId  String
  route     String
  procedure String
}

model Event {
  id              String          @id @default(cuid())
  name            String
  type            EventType
  description     String
  start           DateTime
  end             DateTime
  external        Boolean
  host            String?
  positionsLocked Boolean
  bannerKey       String
  featuredFields  String[]
  positions       EventPosition[]
}

enum EventType {
  HOME
  SUPPORT
  GROUP_FLIGHT
  TRAINING
}

model EventPosition {
  id          String @id @default(cuid())
  event       Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId     String
  position    String
  minRating   Int?
  signupCap   Int?
  controllers User[]
}

model StaffingRequest {
  id          String @id @default(cuid())
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  description String
}

model FileCategory {
  id    String @id @default(cuid())
  name  String
  files File[]
}

model File {
  id          String       @id @default(cuid())
  name        String
  description String
  category    FileCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  key         String
  updatedAt   DateTime
}

model Lesson {
  id                     String           @id @default(cuid())
  identifier             String
  location               Int
  name                   String
  description            String
  position               String
  facility               String
  rubric                 LessonRubric?    @relation(fields: [rubricId], references: [id])
  rubricId               String?          @unique
  updatedAt              DateTime
  instructorOnly         Boolean
  notifyInstructorOnPass Boolean
  trainingTickets        TrainingTicket[]
}

model LessonRubric {
  id     String                 @id @default(cuid())
  Lesson Lesson?
  items  LessonRubricCriteria[]
}

model LessonRubricCriteria {
  id          String               @id @default(cuid())
  rubric      LessonRubric         @relation(fields: [rubricId], references: [id])
  rubricId    String
  criteria    String
  description String
  cells       LessonRubricCell[]
  passing     Int
  maxPoints   Int
  scores      RubricCriteraScore[]
}

model LessonRubricCell {
  id         String               @id @default(cuid())
  criteria   LessonRubricCriteria @relation(fields: [criteriaId], references: [id])
  criteriaId String

  points      Int
  description String
  scores      RubricCriteraScore[]
}

model CommonMistake {
  id               String          @id @default(cuid())
  name             String
  description      String
  facility         String?
  TrainingTicket   TrainingTicket? @relation(fields: [trainingTicketId], references: [id])
  trainingTicketId String?
}

model TrainingSession {
  id                 String           @id @default(cuid())
  student            User             @relation(fields: [studentId], references: [id], onDelete: Cascade, name: "TrainingsStudent", map: "trainingSessions")
  studentId          String
  instructor         User             @relation(fields: [instructorId], references: [id], onDelete: Cascade, name: "TrainingsInstructor", map: "trainingSessionsGiven")
  instructorId       String
  start              DateTime
  end                DateTime
  additionalComments String?
  trainerComments    String?
  vatusaId           String?
  tickets            TrainingTicket[]
  enableMarkdown     Boolean?          @default(false)
}

model TrainingTicket {
  id        String               @id @default(cuid())
  session   TrainingSession      @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
  lesson    Lesson               @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  passed    Boolean
  mistakes  CommonMistake[]
  scores    RubricCriteraScore[]
}

model RubricCriteraScore {
  id               String               @id @default(cuid())
  criteria         LessonRubricCriteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  criteriaId       String
  cell             LessonRubricCell     @relation(fields: [cellId], references: [id], onDelete: Cascade)
  cellId           String
  trainingTicket   TrainingTicket?      @relation(fields: [trainingTicketId], references: [id], onDelete: Cascade)
  trainingTicketId String?
  passed           Boolean
}

enum LOAStatus {
  PENDING
  APPROVED
  DENIED
  INACTIVE
}

model LOA {
  id     String    @id @default(cuid())
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  start  DateTime
  end    DateTime
  reason String
  status LOAStatus
}

model IncidentReport {
  id               String   @id @default(cuid())
  reporter         User     @relation(fields: [reporterId], references: [id], onDelete: Cascade, name: "IncidentReportReporter")
  reporterId       String
  reportee         User     @relation(fields: [reporteeId], references: [id], onDelete: Cascade, name: "IncidentReportReportee")
  reporteeId       String
  timestamp        DateTime
  reason           String
  closed           Boolean
  reporterCallsign String?
  reporteeCallsign String?
}

model SyncTimes {
  id       String    @id @default(cuid())
  roster   DateTime?
  stats    DateTime?
  loas     DateTime?
  events   DateTime?
  soloCert DateTime?
}

model StatisticsPrefixes {
  id       String   @id @default(cuid())
  prefixes String[]
}
